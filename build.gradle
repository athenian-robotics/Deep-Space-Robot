plugins {
    id "java"

    id "edu.wpi.first.GradleRIO" version "2019.2.1"

    // Provide convenience executables for trying out the examples.
    id 'application'

    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'

    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
    //mavenCentral()
}

def ROBOT_MAIN_CLASS = "frc.team852.Main"
def grpcVersion = '1.18.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.5.1'
def protocVersion = '3.5.1-1'


// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    compile group: 'io.prometheus', name: 'client', version: '0.0.10'
    compile group: 'io.prometheus', name: 'simpleclient', version: '0.6.0'
    compile group: 'io.prometheus', name: 'simpleclient_hotspot', version: '0.6.0'
    compile group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.6.0'
    compile group: 'io.prometheus', name: 'simpleclient_servlet', version: '0.6.0'
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.14.v20181114'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.14.v20181114'
    compile group: "edu.wpi.first.shuffleboard", name: "api", version: "1.3.1"
    compile group: 'org.openjfx', name: 'javafx-base', version: '11.0.1'

    // examples/advanced need this for JsonFormat
    compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    compile "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.9.5"

    testCompile group: 'junit', name: 'junit', version: '4.12'

}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

startScripts.enabled = false


// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

wrapper {
    gradleVersion = '5.1.1'
}

startScripts.enabled = false


task grpcServer(type: CreateStartScripts) {
    mainClassName = 'frc.team852.lib.grpc.CVDataServer'
    applicationName = 'grpc-Server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}


applicationDistribution.into('bin') {
    from(grpcServer)
    fileMode = 0755
}


